ext {
    def abi = project.properties['ABI']
    VERSION_CODE = 233
    VERSION_NAME = "1.9.6"
    SDK_MIN_VERSION = 23
    SDK_TARGET_VERSION = 34
    SDK_COMPILE_VERSION = 34
    BUILD_TOOLS_VERSION = "33.0.1"
    ABI_FILTERS = (abi != null) ? abi.split(",") : ['arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64']
    localProps = gradle.ext.localProps

    ANDROID_MATERIAL_VERSION = '1.10.0'
    ANDROID_PLAY_CORE_VERSION = '1.10.3'
    ANDROIDX_CORE_VERSION = '1.12.0'
    ANDROIDX_MEDIA_VERSION = '1.7.0'
    ANDROIDX_APPCOMPAT_VERSION = '1.6.1'
    ANDROIDX_CONSTRAINTLAYOUT_VERSION = '2.1.4'
    ANDROIDX_SWIPEREFRESHLAYOUT_VERSION = '1.1.0'
}

buildscript {

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.4'
        classpath 'com.google.gms:google-services:4.4.0'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

subprojects {
    def isDynFeature = false

    switch (name) {
        case 'fermata':
        case 'control':
            apply plugin: 'com.android.application'
            break
        default:
            if (gradle.ext.modules.contains(':' + name)) {
                isDynFeature = true
                apply plugin: 'com.android.dynamic-feature'
            } else {
                apply plugin: 'com.android.library'
            }
    }

    android {
        compileSdkVersion SDK_COMPILE_VERSION
        buildToolsVersion BUILD_TOOLS_VERSION

        defaultConfig {
            minSdkVersion SDK_MIN_VERSION
            targetSdkVersion SDK_TARGET_VERSION
            vectorDrawables.useSupportLibrary = true
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            resConfigs 'en', 'ru', 'it', 'tr', 'de', 'pt'

            ndk {
                abiFilters = ABI_FILTERS
            }
        }

        if (isDynFeature) {
            flavorDimensions "version"

            productFlavors {
                mobile {
                    dimension "version"
                }
                auto {
                    dimension "version"
                    applicationIdSuffix '.auto' + project.getProperties().getOrDefault('APP_ID_SFX', '')
                }
            }
        }

        buildFeatures {
            buildConfig = true
        }

        compileOptions {
            sourceCompatibility = JavaVersion.VERSION_17
            targetCompatibility = JavaVersion.VERSION_17
        }

        testOptions {
            unitTests.returnDefaultValues = true
        }
    }

    dependencies {
        testImplementation 'junit:junit:4.13.2'
        androidTestImplementation 'androidx.test.ext:junit:1.1.5'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    }
}

gradle.projectsEvaluated {
    gradle.ext.modules.forEach {
        def p = project(it)

        if (p.ext.has('addons')) {
            p.ext.addons.forEach {
                if (gradle.ext.addonInfo.length() == 0) {
                    gradle.ext.addonInfo.append('me.aap.utils.collection.CollectionUtils.sort(new me.aap.fermata.addon.AddonInfo[] {\n')
                } else {
                    gradle.ext.addonInfo.append(',\n')
                }

                gradle.ext.addonInfo.append(
                        "new me.aap.fermata.addon.AddonInfo(\"${p.name}\", \"${it['class']}\", R.string.addon_name_${it['name']}, R.drawable.${it['icon']}, ${it['order']}, ${it['enabled']})")
            }
        }
    }

    if (gradle.ext.addonInfo.length() != 0) {
        gradle.ext.addonInfo.append('\n})')
        project(':fermata').android.productFlavors.forEach {
            it.buildConfigField 'me.aap.fermata.addon.AddonInfo[]', 'ADDONS', gradle.ext.addonInfo.toString()
        }
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}
